from abc import abstractproperty
from sys import platform

from ..hdl import *
from ..build import *


__all__ = ["EfinixPlatform"]


class EfinixPlatform(TemplatedPlatform):
    """

    Required tools:
        * ``efinity``

    The environment is populated by running the script specified in the environment variable
    ``NMIGEN_ENV_efinity``, if present.


    Build products:
        * ``{{name}}.bit``: binary bitstream

    """

    toolchain = "EFINITY" # selected when creating platform

    device  = abstractproperty()
    package = abstractproperty()
    speed   = abstractproperty()
    voltages= abstractproperty()

    @property
    def _part(self):
        return "{}{}".format(self.device, self.package)

    required_tools = [
        "python3",
        "efx_map",
        "efx_pnr",
        "efx_pgm",
    ]

    def iter_port_constraints_isf(self):
        for res, pin, port, attrs in self._ports:
            if isinstance(res.ios[0], Pins):
                if not self.should_skip_port_component(port, attrs, "io"):
                    yield port.io.name, res.ios[0].map_names(self._conn_pins, res), attrs, res.ios[0].dir
            elif isinstance(res.ios[0], DiffPairs):
                if not self.should_skip_port_component(port, attrs, "p"):
                    yield port.p.name, res.ios[0].p.map_names(self._conn_pins, res), attrs, res.ios[0].dir
                if not self.should_skip_port_component(port, attrs, "n"):
                    yield port.n.name, res.ios[0].n.map_names(self._conn_pins, res), attrs, res.ios[0].dir
            else:
                assert False

    isf_template = r"""
            # {{autogenerated}}
            #!/usr/bin/env python3

            {% for port_name, pin_names, attrs, dir in platform.iter_port_constraints_isf() -%}
                {% if dir == "i" -%}
                    design.create_input_gpio("{{port_name}}", {{pin_names|length - 1}}, 0)
                {% elif dir == "o" -%}
                    design.create_output_gpio("{{port_name}}", {{pin_names|length - 1}}, 0)
                {% elif dir == "io" -%}
                    design.create_inout_gpio("{{port_name}}", {{pin_names|length - 1}}, 0)
                {% endif -%}

                {% for pin in pin_names -%}
                    design.assign_pkg_pin("{{port_name}}[{{loop.index0}}]","{{pin}}")
                {% endfor %}

                {% for attr_name, attr_value in attrs.items() -%}
                    set_property {{attr_name}} {{attr_value|tcl_escape}} [get_ports {{port_name|tcl_escape}}]
                {% endfor %}
            {% endfor %}

            {% for bank, voltage in platform.voltages.items() -%}
                design.set_device_property("{{bank}}","VOLTAGE","{{voltage}}","IOBANK")
            {% endfor %}
        """

    file_templates = {
        **TemplatedPlatform.build_script_templates,
        "{{name}}.v": r"""
            /* {{autogenerated}} */
            {{emit_verilog()}}
        """,
        "{{name}}.debug.v": r"""
            /* {{autogenerated}} */
            {{emit_debug_verilog()}}
        """,
        "{{name}}.py": r"""
            # {{autogenerated}}
            #!/usr/bin/env python3

            # Use this script for debugging/checking the ISF code, as the efinix
            # tools won't complain about errors there

            import os
            import sys
            import pprint

            pt_home = os.environ['EFXPT_HOME']
            sys.path.append(pt_home + "/bin")

            from api_service.design import DesignAPI  # Get access to design database API
            from api_service.device import DeviceAPI  # Get access to device database API
            import api_service.excp.design_excp as APIExcp  # Get access to API exception

            is_verbose = True  # Set to True to see detail messages from API engine
            design = DesignAPI(is_verbose)
            device = DeviceAPI(is_verbose)

            design.create("{{name}}", "{{platform._part}}", "./")

        """
        + isf_template +
        r"""
            design.generate(enable_bitstream=True)
        """,
        "{{name}}.isf": isf_template,
        "{{name}}.sdc": r"""
            # {{autogenerated}}
            {% for net_signal, port_signal, frequency in platform.iter_clock_constraints() -%}
                {% if port_signal is none -%}
                    create_clock -period {{1000000000/frequency}} {{net_signal.name|ascii_escape}}
                {% endif %}
            {% endfor %}
        """
    }
    command_templates = [
        r"""
        {{invoke_tool("python3")}} {{name}}.py""",
        r"""
        {{invoke_tool("efx_map")}}
            --write-efx-verilog "{{name}}.map.v"
            --write-premap-module "{{name}}.elab.vdb"
            --binary-db "{{name}}.vdb"
            --device "{{platform._part}}"
            --family "Trion"
            --veri_option "verilog_mode=verilog_2k,vhdl_mode=vhdl_2008"
            --output-dir "./outflow"
            --root {{name}}
            --v {% for file in platform.iter_files(".v", ".sv", ".vhd", ".vhdl") -%} {{file}} {% endfor %} {{name}}.v
        """,
        r"""
        {{invoke_tool("efx_pnr")}}
            --circuit "{{name}}"
            --family "Trion"
            --device "{{platform._part}}"
            --operating_conditions "{{platform.speed}}"
            --pack
            --place
            --route
            --vdb_file "{{name}}.vdb"
            --use_vdb_file "on"
            --place_file "{{name}}.place"
            --route_file "{{name}}.route"
            --sdc_file "{{name}}.sdc"
            --sync_io_file "./{{name}}.isf"
            --seed "1"
            --work_dir "./work_pnr"
            --output_dir "./outflow"
            --timing_analysis "on"
            --load_delay_matrix
        """,
        r"""
        {{invoke_tool("efx_pgm")}}
            --source "./work_pnr/{{name}}.lbf"
            --periph "./outflow/{{name}}.lpf"
            --dest "{{name}}.hex"
            --device "{{platform._part}}"
            --family "Trion"
            --enable_external_master_clock "off"
            --oscillator_clock_divider "DIV8"
            --active_capture_clk_edge "posedge"
            --spi_low_power_mode "on"
            --io_weak_pullup "on"
            --enable_roms "smart"
            --mode "active"
            --width "1"
            --release_tri_then_reset "on"
        """,
    ]
